const { PrismaClient } = require('@prisma/client');
require('dotenv').config();

const prisma = new PrismaClient({
  log: ['error'],
});

async function quickDiagnostic() {
  console.log('üöÄ Diagnostic rapide de la base de donn√©es...\n');

  // 1. V√©rifier les variables d'environnement
  console.log('1Ô∏è‚É£ Variables d\'environnement:');
  console.log('DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ Pr√©sent' : '‚ùå Manquant');
  console.log('DIRECT_URL:', process.env.DIRECT_URL ? '‚úÖ Pr√©sent' : '‚ùå Manquant');
  console.log('NODE_ENV:', process.env.NODE_ENV || 'Non d√©fini');
  console.log('');

  // 2. Test de connexion
  try {
    console.log('2Ô∏è‚É£ Test de connexion...');
    await prisma.$connect();
    console.log('‚úÖ Connexion r√©ussie\n');

    // 3. V√©rification rapide des tables
    console.log('3Ô∏è‚É£ V√©rification des tables...');
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `;
    
    const expectedTables = ['User', 'Product', 'Category', 'Brand', 'Order', 'Cart'];
    const foundTables = tables.map(t => t.table_name);
    
    console.log('Tables trouv√©es:', foundTables);
    
    const missingTables = expectedTables.filter(t => !foundTables.includes(t));
    if (missingTables.length > 0) {
      console.log('‚ùå Tables manquantes:', missingTables);
    } else {
      console.log('‚úÖ Toutes les tables principales sont pr√©sentes');
    }
    console.log('');

    // 4. Test des requ√™tes Prisma de base
    console.log('4Ô∏è‚É£ Test des requ√™tes Prisma...');
    
    try {
      const categoryCount = await prisma.category.count();
      console.log('‚úÖ Categories:', categoryCount);
    } catch (e) {
      console.log('‚ùå Erreur categories:', e.message);
    }
    
    try {
      const productCount = await prisma.product.count();
      console.log('‚úÖ Produits:', productCount);
    } catch (e) {
      console.log('‚ùå Erreur produits:', e.message);
    }
    
    try {
      const brandCount = await prisma.brand.count();
      console.log('‚úÖ Marques:', brandCount);
    } catch (e) {
      console.log('‚ùå Erreur marques:', e.message);
    }
    
    try {
      const userCount = await prisma.user.count();
      console.log('‚úÖ Utilisateurs:', userCount);
    } catch (e) {
      console.log('‚ùå Erreur utilisateurs:', e.message);
    }
    console.log('');

    // 5. V√©rification des relations
    if (productCount > 0) {
      console.log('5Ô∏è‚É£ Test des relations...');
      try {
        const sampleProduct = await prisma.product.findFirst({
          include: {
            category: true,
            brand: true
          }
        });
        
        if (sampleProduct) {
          console.log('‚úÖ Relations test√©es sur un produit:');
          console.log('  - Cat√©gorie:', sampleProduct.category?.name || 'Aucune');
          console.log('  - Marque:', sampleProduct.brand?.name || 'Aucune');
        }
      } catch (e) {
        console.log('‚ùå Erreur relations:', e.message);
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur critique:', error.message);
    
    if (error.code === 'P1001') {
      console.error('üîå Erreur de connexion - V√©rifiez DATABASE_URL');
      console.error('üí° Solutions possibles:');
      console.error('   - V√©rifiez que la base est accessible');
      console.error('   - V√©rifiez les credentials');
      console.error('   - V√©rifiez le firewall/network');
    } else if (error.code === 'P2002') {
      console.error('üîë Erreur de contrainte unique');
    } else if (error.code === 'P2003') {
      console.error('üîó Erreur de relation - Cl√© √©trang√®re manquante');
    } else if (error.code === 'P2024') {
      console.error('‚è±Ô∏è Timeout de connexion - Base peut √™tre suspendue (Neon)');
    }
  } finally {
    await prisma.$disconnect();
    console.log('\nüîå Connexion ferm√©e');
  }
}

// Ex√©cuter le diagnostic rapide
quickDiagnostic().catch(console.error);
