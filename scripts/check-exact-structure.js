const { PrismaClient } = require('@prisma/client');
require('dotenv').config();

const prisma = new PrismaClient({
  log: ['error'],
  datasources: {
    db: {
      url: process.env.DIRECT_URL, // Utilise DIRECT_URL pour le test
    },
  },
});

async function checkExactStructure() {
  console.log('üîç V√©rification de la structure exacte avec Prisma...\n');

  try {
    await prisma.$connect();
    console.log('‚úÖ Connexion Prisma r√©ussie\n');

    // 1. V√©rifier la table Product
    console.log('1Ô∏è‚É£ Structure de la table Product:');
    try {
      const products = await prisma.product.findMany({
        take: 1,
        select: {
          id: true,
          name: true,
          description: true,
          priceCents: true,
          stock: true,
          categoryId: true,
          brandId: true,
          createdAt: true,
          updatedAt: true
        }
      });

      if (products.length > 0) {
        const product = products[0];
        console.log('‚úÖ Structure Product:');
        console.log('   Colonnes disponibles:');
        Object.keys(product).forEach(key => {
          console.log(`     - ${key}: ${typeof product[key]} (${product[key]})`);
        });
      } else {
        console.log('‚ùå Aucun produit trouv√©');
      }
    } catch (e) {
      console.log('‚ùå Erreur Product:', e.message);
    }
    console.log('');

    // 2. V√©rifier la table Category
    console.log('2Ô∏è‚É£ Structure de la table Category:');
    try {
      const categories = await prisma.category.findMany({
        take: 1,
        select: {
          id: true,
          name: true,
          slug: true,
          description: true,
          imageUrl: true,
          createdAt: true,
          updatedAt: true
        }
      });

      if (categories.length > 0) {
        const category = categories[0];
        console.log('‚úÖ Structure Category:');
        console.log('   Colonnes disponibles:');
        Object.keys(category).forEach(key => {
          console.log(`     - ${key}: ${typeof category[key]} (${category[key]})`);
        });
      } else {
        console.log('‚ùå Aucune cat√©gorie trouv√©e');
      }
    } catch (e) {
      console.log('‚ùå Erreur Category:', e.message);
    }
    console.log('');

    // 3. V√©rifier la table Brand
    console.log('3Ô∏è‚É£ Structure de la table Brand:');
    try {
      const brands = await prisma.brand.findMany({
        take: 1,
        select: {
          id: true,
          name: true,
          slug: true,
          description: true,
          logoUrl: true,
          createdAt: true,
          updatedAt: true
        }
      });

      if (brands.length > 0) {
        const brand = brands[0];
        console.log('‚úÖ Structure Brand:');
        console.log('   Colonnes disponibles:');
        Object.keys(brand).forEach(key => {
          console.log(`     - ${key}: ${typeof brand[key]} (${brand[key]})`);
        });
      } else {
        console.log('‚ùå Aucune marque trouv√©e');
      }
    } catch (e) {
      console.log('‚ùå Erreur Brand:', e.message);
    }
    console.log('');

    // 4. Test des relations
    console.log('4Ô∏è‚É£ Test des relations:');
    try {
      const productWithRelations = await prisma.product.findFirst({
        include: {
          category: true,
          brand: true
        }
      });

      if (productWithRelations) {
        console.log('‚úÖ Relations Product:');
        console.log(`   - Cat√©gorie: ${productWithRelations.category?.name || 'Aucune'}`);
        console.log(`   - Marque: ${productWithRelations.brand?.name || 'Aucune'}`);
      }
    } catch (e) {
      console.log('‚ùå Erreur relations:', e.message);
    }

    console.log('\nüéØ CONCLUSION:');
    console.log('‚úÖ Votre base utilise des noms avec majuscules (Product, Category, Brand)');
    console.log('‚úÖ Les colonnes utilisent camelCase (priceCents, categoryId, etc.)');
    console.log('‚úÖ Vos APIs doivent √™tre adapt√©es en cons√©quence');

  } catch (error) {
    console.error('‚ùå Erreur critique:', error.message);
  } finally {
    await prisma.$disconnect();
    console.log('\nüîå Connexion ferm√©e');
  }
}

// Ex√©cuter le script
checkExactStructure().catch(console.error);
