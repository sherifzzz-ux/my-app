const { PrismaClient } = require('@prisma/client');
require('dotenv').config();

const prisma = new PrismaClient({
  log: ['query', 'info', 'warn', 'error'],
});

async function runDiagnostics() {
  console.log('üîç D√©marrage du diagnostic de la base de donn√©es...\n');

  try {
    // Test de connexion
    console.log('1Ô∏è‚É£ Test de connexion...');
    await prisma.$connect();
    console.log('‚úÖ Connexion r√©ussie √† la base de donn√©es\n');

    // V√©rification des tables
    console.log('2Ô∏è‚É£ V√©rification des tables...');
    const tables = await prisma.$queryRaw`
      SELECT table_name, table_type 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `;
    console.log('üìã Tables trouv√©es:', tables);
    console.log('');

    // Compter les enregistrements
    console.log('3Ô∏è‚É£ Comptage des enregistrements...');
    const counts = await prisma.$queryRaw`
      SELECT 'User' as table_name, COUNT(*) as count FROM "User"
      UNION ALL
      SELECT 'Product', COUNT(*) FROM "Product"
      UNION ALL
      SELECT 'Category', COUNT(*) FROM "Category"
      UNION ALL
      SELECT 'Brand', COUNT(*) FROM "Brand"
      UNION ALL
      SELECT 'Order', COUNT(*) FROM "Order"
      UNION ALL
      SELECT 'Cart', COUNT(*) FROM "Cart"
    `;
    console.log('üìä Nombre d\'enregistrements par table:', counts);
    console.log('');

    // V√©rifier les relations
    console.log('4Ô∏è‚É£ V√©rification des relations...');
    const productsWithRelations = await prisma.$queryRaw`
      SELECT 
        p.id,
        p.name as product_name,
        c.name as category_name,
        b.name as brand_name,
        p."categoryId",
        p."brandId"
      FROM "Product" p
      LEFT JOIN "Category" c ON p."categoryId" = c.id
      LEFT JOIN "Brand" b ON p."brandId" = b.id
      LIMIT 5
    `;
    console.log('üîó Exemples de produits avec relations:', productsWithRelations);
    console.log('');

    // V√©rifier les produits orphelins
    console.log('5Ô∏è‚É£ V√©rification des produits orphelins...');
    const orphanedProducts = await prisma.$queryRaw`
      SELECT COUNT(*) as orphaned_count
      FROM "Product" p
      LEFT JOIN "Category" c ON p."categoryId" = c.id
      WHERE c.id IS NULL
    `;
    console.log('‚ö†Ô∏è Produits sans cat√©gorie:', orphanedProducts);
    console.log('');

    // V√©rifier la structure des colonnes
    console.log('6Ô∏è‚É£ Structure des colonnes principales...');
    const columns = await prisma.$queryRaw`
      SELECT 
        table_name,
        column_name,
        data_type,
        is_nullable
      FROM information_schema.columns 
      WHERE table_schema = 'public' 
      AND table_name IN ('User', 'Product', 'Category', 'Brand')
      ORDER BY table_name, ordinal_position
    `;
    console.log('üèóÔ∏è Structure des colonnes:', columns);
    console.log('');

    // Test des requ√™tes Prisma
    console.log('7Ô∏è‚É£ Test des requ√™tes Prisma...');
    
    const categories = await prisma.category.findMany();
    console.log('‚úÖ Categories via Prisma:', categories.length, 'trouv√©es');
    
    const products = await prisma.product.findMany({
      take: 3,
      include: {
        category: true,
        brand: true
      }
    });
    console.log('‚úÖ Produits via Prisma:', products.length, 'trouv√©s');
    
    const brands = await prisma.brand.findMany();
    console.log('‚úÖ Marques via Prisma:', brands.length, 'trouv√©es');

  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
    
    if (error.code === 'P1001') {
      console.error('üîå Erreur de connexion - V√©rifiez DATABASE_URL');
    } else if (error.code === 'P2002') {
      console.error('üîë Erreur de contrainte unique');
    } else if (error.code === 'P2003') {
      console.error('üîó Erreur de relation - Cl√© √©trang√®re manquante');
    }
  } finally {
    await prisma.$disconnect();
    console.log('\nüîå Connexion ferm√©e');
  }
}

// Ex√©cuter le diagnostic
runDiagnostics().catch(console.error);
