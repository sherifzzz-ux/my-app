const { PrismaClient } = require('@prisma/client');
require('dotenv').config();

const prisma = new PrismaClient({
  log: ['query', 'info', 'warn', 'error'],
});

async function supabaseDiagnostic() {
  console.log('üîç Diagnostic Supabase - Mami Shop\n');

  // 1. V√©rifier les variables d'environnement Supabase
  console.log('1Ô∏è‚É£ Variables d\'environnement Supabase:');
  console.log('DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ Pr√©sent' : '‚ùå Manquant');
  console.log('DIRECT_URL:', process.env.DIRECT_URL ? '‚úÖ Pr√©sent' : '‚ùå Manquant');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? '‚úÖ Pr√©sent' : '‚ùå Manquant');
  console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '‚úÖ Pr√©sent' : '‚ùå Manquant');
  console.log('SUPABASE_SERVICE_ROLE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY ? '‚úÖ Pr√©sent' : '‚ùå Manquant');
  console.log('AUTH_SECRET:', process.env.AUTH_SECRET ? '‚úÖ Pr√©sent' : '‚ùå Manquant');
  console.log('RESEND_API_KEY:', process.env.RESEND_API_KEY ? '‚úÖ Pr√©sent' : '‚ùå Manquant');
  console.log('NODE_ENV:', process.env.NODE_ENV || 'Non d√©fini');
  console.log('');

  // 2. Test de connexion directe √† PostgreSQL
  try {
    console.log('2Ô∏è‚É£ Test de connexion directe √† PostgreSQL...');
    await prisma.$connect();
    console.log('‚úÖ Connexion directe r√©ussie\n');

    // 3. V√©rification des sch√©mas Supabase
    console.log('3Ô∏è‚É£ V√©rification des sch√©mas Supabase...');
    const schemas = await prisma.$queryRaw`
      SELECT schema_name 
      FROM information_schema.schemata 
      WHERE schema_name IN ('public', 'auth', 'storage', 'graphql_public')
      ORDER BY schema_name
    `;
    console.log('üìã Sch√©mas Supabase trouv√©s:', schemas.map(s => s.schema_name));
    console.log('');

    // 4. V√©rification des tables publiques
    console.log('4Ô∏è‚É£ V√©rification des tables publiques...');
    const tables = await prisma.$queryRaw`
      SELECT table_name, table_type 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `;
    
    const expectedTables = ['User', 'Product', 'Category', 'Brand', 'Order', 'Cart'];
    const foundTables = tables.map(t => t.table_name);
    
    console.log('Tables trouv√©es:', foundTables);
    
    const missingTables = expectedTables.filter(t => !foundTables.includes(t));
    if (missingTables.length > 0) {
      console.log('‚ùå Tables manquantes:', missingTables);
    } else {
      console.log('‚úÖ Toutes les tables principales sont pr√©sentes');
    }
    console.log('');

    // 5. V√©rification des politiques RLS
    console.log('5Ô∏è‚É£ V√©rification des politiques RLS...');
    try {
      const rlsPolicies = await prisma.$queryRaw`
        SELECT 
          schemaname,
          tablename,
          policyname,
          permissive,
          roles,
          cmd
        FROM pg_policies 
        WHERE schemaname = 'public'
        ORDER BY tablename, policyname
      `;
      console.log('üîí Politiques RLS trouv√©es:', rlsPolicies.length);
      rlsPolicies.forEach(policy => {
        console.log(`  - ${policy.tablename}.${policy.policyname} (${policy.cmd})`);
      });
    } catch (e) {
      console.log('‚ö†Ô∏è Erreur lors de la v√©rification RLS:', e.message);
    }
    console.log('');

    // 6. Test des requ√™tes Prisma avec relations
    console.log('6Ô∏è‚É£ Test des requ√™tes Prisma...');
    
    let productCount = 0;
    try {
      const categoryCount = await prisma.category.count();
      console.log('‚úÖ Categories:', categoryCount);
    } catch (e) {
      console.log('‚ùå Erreur categories:', e.message);
    }
    
    try {
      productCount = await prisma.product.count();
      console.log('‚úÖ Produits:', productCount);
    } catch (e) {
      console.log('‚ùå Erreur produits:', e.message);
    }
    
    try {
      const brandCount = await prisma.brand.count();
      console.log('‚úÖ Marques:', brandCount);
    } catch (e) {
      console.log('‚ùå Erreur marques:', e.message);
    }
    console.log('');

    // 7. Test des relations et includes
    if (productCount > 0) {
      console.log('7Ô∏è‚É£ Test des relations et includes...');
      try {
        const sampleProduct = await prisma.product.findFirst({
          include: {
            category: true,
            brand: true
          }
        });
        
        if (sampleProduct) {
          console.log('‚úÖ Relations test√©es sur un produit:');
          console.log('  - Cat√©gorie:', sampleProduct.category?.name || 'Aucune');
          console.log('  - Marque:', sampleProduct.brand?.name || 'Aucune');
          console.log('  - Stock:', sampleProduct.stock);
          console.log('  - Prix:', sampleProduct.priceCents);
        }
      } catch (e) {
        console.log('‚ùå Erreur relations:', e.message);
      }
    }

    // 8. V√©rification des permissions utilisateur
    console.log('8Ô∏è‚É£ V√©rification des permissions...');
    try {
      const permissions = await prisma.$queryRaw`
        SELECT 
          'PERMISSIONS_UTILISATEUR' as test,
          has_table_privilege(current_user, '"User"', 'SELECT') as can_read_user,
          has_table_privilege(current_user, '"Product"', 'SELECT') as can_read_product,
          has_table_privilege(current_user, '"Category"', 'SELECT') as can_read_category,
          has_table_privilege(current_user, '"Brand"', 'SELECT') as can_read_brand
      `;
      console.log('üîë Permissions utilisateur:', permissions[0]);
    } catch (e) {
      console.log('‚ö†Ô∏è Erreur lors de la v√©rification des permissions:', e.message);
    }
    console.log('');

    // 9. V√©rification des connexions actives
    console.log('9Ô∏è‚É£ V√©rification des connexions actives...');
    try {
      const activeConnections = await prisma.$queryRaw`
        SELECT 
          COUNT(*) as total_connections,
          COUNT(*) FILTER (WHERE state = 'active') as active_queries,
          COUNT(*) FILTER (WHERE state = 'idle') as idle_connections
        FROM pg_stat_activity 
        WHERE datname = current_database()
      `;
      console.log('üîå Connexions actives:', activeConnections[0]);
    } catch (e) {
      console.log('‚ö†Ô∏è Erreur lors de la v√©rification des connexions:', e.message);
    }
    console.log('');

    // 10. Test de performance avec plusieurs requ√™tes
    console.log('üîü Test de performance...');
    const startTime = Date.now();
    
    try {
      const [categories, products, brands] = await Promise.all([
        prisma.category.findMany({ take: 5 }),
        prisma.product.findMany({ take: 5 }),
        prisma.brand.findMany({ take: 5 })
      ]);
      
      const endTime = Date.now();
      console.log(`‚úÖ Requ√™tes parall√®les ex√©cut√©es en ${endTime - startTime}ms`);
      console.log(`  - Categories: ${categories.length}`);
      console.log(`  - Produits: ${products.length}`);
      console.log(`  - Marques: ${brands.length}`);
    } catch (e) {
      console.log('‚ùå Erreur lors du test de performance:', e.message);
    }

  } catch (error) {
    console.error('‚ùå Erreur critique:', error.message);
    
    if (error.code === 'P1001') {
      console.error('üîå Erreur de connexion - V√©rifiez DATABASE_URL');
      console.error('üí° Solutions possibles:');
      console.error('   - V√©rifiez que Supabase est accessible');
      console.error('   - V√©rifiez les credentials PostgreSQL');
      console.error('   - V√©rifiez le firewall/network');
      console.error('   - V√©rifiez que la base n\'est pas suspendue');
    } else if (error.code === 'P2002') {
      console.error('üîë Erreur de contrainte unique');
    } else if (error.code === 'P2003') {
      console.error('üîó Erreur de relation - Cl√© √©trang√®re manquante');
    } else if (error.code === 'P2024') {
      console.error('‚è±Ô∏è Timeout de connexion - Base Supabase peut √™tre suspendue');
    } else if (error.code === 'P2025') {
      console.error('üîí Erreur de permission - V√©rifiez les politiques RLS');
    }
  } finally {
    await prisma.$disconnect();
    console.log('\nüîå Connexion ferm√©e');
  }
}

// Ex√©cuter le diagnostic Supabase
supabaseDiagnostic().catch(console.error);
